import copy
import json
import os

from aiogram import types
from ..keyboards import mark_salary_mk, mk_go, mk_groups_kb, mk_status_absent, mk_status_attend, mk_all_or_group_stat

__all__ = ["edit_msg_clicked_group", "edit_msg_clicked_salary", "edit_msg_clicked_back", "edit_status_student", "edit_msg_marks", "edit_status_mark"]


async def edit_msg_clicked_group(msg: types.Message):
    "–í—ã–≤–æ–¥ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"
    mk_res = await mk_groups_kb("output")
    if mk_res['inline_keyboard'][0]:
        await msg.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=mk_res)
    else:
        await msg.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã", reply_markup=mk_res)


async def edit_msg_clicked_salary(msg: types.Message, salary):
    await msg.edit_text(f"–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary}—Ä", reply_markup=mk_go)


async def edit_msg_clicked_back(msg: types.Message):
    await msg.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ  –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=mark_salary_mk)


async def edit_msg_marks(msg: types.Message, clb, webapp=False):
    mk_res = await mk_groups_kb(clb, webapp)
    if mk_res['inline_keyboard'][0]:
        await msg.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=mk_res)
    else:
        await msg.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã", reply_markup=mk_res)


counting = 0
async def edit_status_student(msg_edit: types.Message, txt_clb, txt_msg, count_student, students_names_status):
    global counting

    data_sudents = copy.deepcopy(msg_edit)  # –∫–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–¥–µ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏


    if txt_msg == '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚úÖ':
        await msg_edit[txt_clb].edit_text(msg_edit[txt_clb].text.replace("–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚úÖ", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå"), reply_markup=mk_status_attend(txt_clb))
        counting += 1
        data_sudents[txt_clb]['text'] = 0
        students_names_status.students_names[txt_clb] = 0

    else:
        await msg_edit[txt_clb].edit_text(msg_edit[txt_clb].text.replace("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå", "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚úÖ"), reply_markup=mk_status_absent(txt_clb))
        counting -= 1
        data_sudents[txt_clb]['text'] = 1
        students_names_status.students_names[txt_clb] = 1
    return count_student - counting, data_sudents


stat_copy = False
async def edit_status_mark(msg_edit_mark: types.Message, txt_clb, if_copy=stat_copy):
    global counting

    if os.path.exists("data_files/json_status_students.json"):
        json_data = json.load(open("data_files/json_status_students.json", encoding='utf-8'))

        data_sudents = copy.deepcopy(msg_edit_mark)  # –∫–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–¥–µ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–∂–Ω—ã–π —Ç–æ–º—É —á—Ç–æ –µ—Å—Ç—å

        if txt_clb.split(" ")[1] == 'plus':
            txt_clb = txt_clb.replace("status_mark plus ", "")
            # await msg_edit_mark[txt_clb.replace("status_mark plus", "").strip().title()].edit_text(msg_edit_mark[txt_clb].text.replace("üü°", "üü¢"))
            await msg_edit_mark[txt_clb].edit_text(msg_edit_mark[txt_clb].text.replace("üü°", "üü¢"))
            data_sudents[txt_clb]['text'] = 1

            json_data.append({txt_clb: 1})
            with open("data_files/json_status_students.json", "w", encoding='utf-8') as json_file:
                json_file.write(json.dumps(json_data, indent=2, ensure_ascii=False))
        else:
            txt_clb = txt_clb.replace("status_mark minus ", "")
            await msg_edit_mark[txt_clb].edit_text(msg_edit_mark[txt_clb].text.replace("üü°", "üî¥"))

            data_sudents[txt_clb]['text'] = 0.5
            json_data.append({txt_clb: 0.5})

            with open("data_files/json_status_students.json", "w", encoding='utf-8') as json_file:
                json_file.write(json.dumps(json_data, indent=2, ensure_ascii=False))
    else:
        data_sudents = copy.deepcopy(msg_edit_mark)  # –∫–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–¥–µ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–∂–Ω—ã–π —Ç–æ–º—É —á—Ç–æ –µ—Å—Ç—å
        if txt_clb.split(" ")[1] == 'plus':
            txt_clb = txt_clb.replace("status_mark plus ", "")
            # await msg_edit_mark[txt_clb.replace("status_mark plus", "").strip().title()].edit_text(msg_edit_mark[txt_clb].text.replace("üü°", "üü¢"))
            await msg_edit_mark[txt_clb].edit_text(msg_edit_mark[txt_clb].text.replace("üü°", "üü¢"))
            data_sudents[txt_clb]['text'] = 1
            with open("data_files/json_status_students.json", "w", encoding='utf-8') as json_file:
                json_file.write(json.dumps([{txt_clb: 1}], indent=2, ensure_ascii=False))
        else:
            txt_clb = txt_clb.replace("status_mark minus ", "")
            txt_clb = txt_clb.replace("status_mark minus ", "")
            await msg_edit_mark[txt_clb].edit_text(msg_edit_mark[txt_clb].text.replace("üü°", "üî¥"))

            data_sudents[txt_clb]['text'] = 0.5

            with open("data_files/json_status_students.json", "w", encoding='utf-8') as json_file:
                json_file.write(json.dumps([{txt_clb: 0.5}], indent=2, ensure_ascii=False))


    # return data_sudents
    # return data_sudents


async def edit_all_or_groups(msg: types.Message):
    await msg.edit_text("–ö–∞–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?:", reply_markup=mk_all_or_group_stat)
    msg.clean()
