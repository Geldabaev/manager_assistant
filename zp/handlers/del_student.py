from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import types, Dispatcher
from zp.create_bot import bot
from zp.keyboards import other_kb
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from zp.data_base import (sql_delete_student, read_sql, read_sql_get_rowid, read_sql_fk)


class FSMAddedDelStudent(StatesGroup):
    get_name = State()
    del_end = State()


async def start_fsm_del_student(msg: types.Message, state: FSMContext):
    if msg.from_user.id == 5295520075:
        await state.update_data(name_student=msg.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–∑—É
        read = await read_sql("my_groups")
        if read:
            kb_list = []
            for ret in read:
                kb_list.append(KeyboardButton(ret[1]))
            await bot.send_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É",
                                   reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(*kb_list).add(other_kb.cancel_kb))
            await FSMAddedDelStudent.get_name.set()

        else:
            await bot.send_message(msg.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å —É—á–µ–Ω–∏–∫–∞",
                                   reply_markup=other_kb.start_kb)
            await state.finish()
    else:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)

async def del_student_name(msg: types.Message, state: FSMContext):
    if msg.from_user.id == 5295520075:
        await state.update_data(name_group=msg.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–∑—É
        data: dict = await state.get_data()
        id_group: int = await read_sql_get_rowid(data['name_group'])
        read: list = await read_sql_fk(id_group)
        if read:
            kb_list = []
            for ret in read:
                kb_list.append(KeyboardButton(ret[0]))
            await bot.send_message(msg.from_user.id, "–ö–æ–≥–æ —É–¥–∞–ª—è–µ–º?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(*kb_list).add(other_kb.cancel_kb))
            await FSMAddedDelStudent.next()
        else:
            await bot.send_message(msg.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ",
                                   reply_markup=other_kb.start_kb)
            await state.finish()
    else:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)


async def student_del_end(msg: types.Message, state: FSMContext):
    if msg.from_user.id == 5295520075:
        await state.update_data(name_student=msg.text)
        data = await state.get_data()  # –¥–æ—Å—Ç–∞–µ–º –∏–∑ –æ–∑—É
        await sql_delete_student(data['name_student'])

        await bot.send_message(msg.chat.id, f'–£—á–µ–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {data["name_group"]}', reply_markup=other_kb.start_kb)
        await state.finish()
    else:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)

def register_handlers_student_del(dp: Dispatcher):
    dp.register_message_handler(start_fsm_del_student, lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ üóë", state=None)
    dp.register_message_handler(del_student_name, state=FSMAddedDelStudent.get_name)
    dp.register_message_handler(student_del_end, state=FSMAddedDelStudent.del_end)
