import json

from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from zp.create_bot import bot
from zp.keyboards import other_kb
from zp.data_base import join_table
from ..models import edit_status_student, edit_status_mark
from ..excel import main_exel
from datetime import datetime
from ..statistics.models import creating_csv
from zp.diagrams import res_save_plot


id_msg_del: list = []
async def output_students_group(callback_query: types.CallbackQuery):
    global msg_edit, name_group, count_student
    if callback_query.from_user.id == 5295520075:
        count_student = ""  # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –º–µ–Ω—è–ª–∏, –≤–æ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–∫, —Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞
        # —á—Ç–æ–±—ã —ç—Ç–æ–≥–æ –∏–∑–±–µ–∂–∞—Ç—å –æ—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏ –±–µ—Ä–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä—è–º–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –Ω–µ –∏–∑ —ç—Ç–æ–≥–æ (count_student)
        name_group_and_students = await join_table(callback_query.data.replace("output ", "").split(":")[0]) # split(":") –±–µ—Ä–µ–º id –≥—Ä—É–ø–ø—ã
        if name_group_and_students:
            msg_edit = {}  # –∫–ª—é—á —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–Ω–∞—á–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            for ret in name_group_and_students:
                id_msg = await bot.send_message(callback_query.from_user.id, text=ret[0].title() + "\n–°—Ç–∞—Ç—É—Å: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚úÖ", reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text=f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {ret[0].title()} ‚úñ', callback_data=f"status {ret[0].title()}")))
                msg_edit[ret[0].title()] = id_msg
            name_group = ret[1]
            await callback_query.answer("–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ " + name_group)  # –≤–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
            await bot.send_message(callback_query.from_user.id, f"–£—á–µ–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã {name_group} ‚òù", reply_markup=other_kb.ready_mk)
        else:
            await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ", reply_markup=ReplyKeyboardRemove())
    else:
        await callback_query.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)


data_sudents: str = ''  # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–∞–ª–æ not defined
async def absent_attend_student(clb: types.CallbackQuery):
    global count_student, data_sudents
    if clb.from_user.id == 5295520075:
        "–í—ã–≤–µ—Å—Ç–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç–≤–æ–≤–∞–Ω–∏–∏"
        "—Ä–µ–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç (–ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç)"
        txt_msg = clb.message.text.split(":")[1].strip()
        txt_clb = clb.data.replace("status", "").strip().title()  # –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∏, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–µ–µ
        count_student, data_sudents = await edit_status_student(msg_edit, txt_clb, txt_msg, len(msg_edit))
    else:
        await clb.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)


async def ready_to_write_exel(msg: types.callback_query):
    global count_student, msg_edit
    if msg.from_user.id == 5295520075:
        date_list = []
        names_list = []
        status_list = []
        groups_list = []
        try:
            if not count_student: # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –º–µ–Ω—è–ª–∏
                raise NameError
            # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ excel
            main_exel(name_group, count_student)
        except NameError:  # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –º–µ–Ω—è–ª–∏
            count_student = len(msg_edit)
            main_exel(name_group, count_student)
            count_student = ''  # –æ—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≤ —Å–ª–µ–¥—é—â–∏–π —Ä–∞–∑ –∫–∞–∫ –±—É–¥–Ω–æ –º—ã –Ω–µ –º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å, —Ö–æ—Ç—è –∏ –º–µ–Ω—è–ª–∏
        finally:
            date = datetime.now().strftime("%d_%m_%Y")
            creating_csv().create_csv_headers()
            if data_sudents:  # –±—ã–ª –ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω
                for name, status in data_sudents.items():
                    if isinstance(status['text'], str):
                        if status['text'].split(":")[1].strip() == "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚úÖ":
                            data_sudents[name]['text'] = 1
                for name, status in data_sudents.items():
                    names_list.append(name)
                    status_list.append(status['text'])
                    date_list.append(date)
                    groups_list.append(name_group)
            else:  # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
                for name, status in msg_edit.items():
                    if isinstance(status['text'], str):
                        if status['text'].split(":")[1].strip() == "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚úÖ":
                            msg_edit[name]['text'] = 1
                for name, status in msg_edit.items():
                    date_list.append(date)
                    groups_list.append(name_group)
                    names_list.append(name)
                    status_list.append(status['text'])
            creating_csv().create_df(date_list, names_list, groups_list, status_list)
        await msg.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=other_kb.start_kb)
    else:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)


async def output_students_group_mark(callback_query: types.CallbackQuery):
    "–î–ª—è –≤—ã–≤–æ–¥–∞ —Ñ—É–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞ –ø–æ–æ—â–µ—Ä–µ–Ω–∏–µ, –∑–∞–º–µ—á–∞–Ω–∏–µ"
    global msg_edit_mark, group_name
    if callback_query.from_user.id == 5295520075:
        group_name = callback_query.data.replace("mark_set ", "").strip().split(":")[1]
        name_group_and_students = await join_table(callback_query.data.replace("mark_set ", "").split(":")[0])  # –±–µ—Ä–µ–º id –≥—Ä—É–ø–ø—ã
        if name_group_and_students:
            msg_edit_mark = {}  # –∫–ª—é—á —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–Ω–∞—á–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            for ret in name_group_and_students:
                id_msg = await bot.send_message(callback_query.from_user.id, text=ret[0].title() + " üü°", reply_markup=InlineKeyboardMarkup().row(
                    InlineKeyboardButton(text=f'–ü–æ–æ—â—Ä–∏—Ç—å', callback_data=f"status_mark plus {ret[0].title()}"), InlineKeyboardButton(text=f'–ó–∞–º–µ—á–∞–Ω–∏–µ', callback_data=f"status_mark minus {ret[0].title()}")))
                msg_edit_mark[ret[0].title()] = id_msg
            name_group_mark = ret[1]
            await bot.send_message(callback_query.from_user.id, f"–£—á–µ–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã {name_group_mark} ‚òù", reply_markup=other_kb.ready_mk_stat)
        else:
            await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ", reply_markup=ReplyKeyboardRemove())
    else:
        await callback_query.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)

async def encourage_reprimand_student(clb: types.CallbackQuery):
    "–í—ã–≤–µ—Å—Ç–∏ –¥–ª—è –ø–æ–æ—â–µ—Ä–µ–Ω–∏–∏ –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏–∏"
    global count_student, data_sudents_marks
    if clb.from_user.id == 5295520075:
        "—Ä–µ–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–º–µ—á–∞–Ω–∏–µ –∏ –ø–æ–æ—â–µ—Ä–µ–Ω–∏–µ"
        txt_msg = clb.message.text.strip()
        # txt_clb = clb.data.replace("status_mark", "").strip().title()  # –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∏, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–µ–µ
        txt_clb = clb.data # –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∏, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–µ–µ
        # data_sudents_marks = await edit_status_mark(msg_edit_mark, txt_clb)
        await edit_status_mark(msg_edit_mark, txt_clb)
    else:
        await clb.message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)


async def ready_to_write_statistics(msg: types.callback_query):
    json_data = json.load(open("data_files/json_status_students.json", encoding='utf-8'))
    if msg.from_user.id == 5295520075:
        names_list = []
        mark_minis = []
        mark_plus = []
        names_groups = []
        date_list = []
        date = datetime.now().strftime("%d_%m_%Y")
        print(json_data, "json")
        for dicts in json_data:
            """
            –ó–∞ –ø–æ–æ—â–µ—Ä–µ–Ω–∏–µ 1, –∑–∞–º–µ—á–∞–Ω–∏–µ -0.5.
            –ï—Å–ª–∏ —á–∏—Å–ª–æ, —Ç–æ –∫–∞–∫–æ–µ:
                –ó–∞–Ω—á–∏—Ç –µ—Å—Ç—å –ª–∏–±–æ –∑–∞–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–æ—â–µ—Ä–µ–Ω–∏–µ
            –ò–Ω–∞—á–µ:
                0 –Ω–∏—á–µ–≥–æ

            –≤ –¥—Ä—É–≥–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –∑–∞ –ø—Ä–æ–ø—É—Å–∫–∏ 0, –Ω–∞ –≥—Ä–∞—Ñ–∏–µ –ø—Ä–æ–ø—É—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å -1
            
            """

            names_list.append(list(dicts.keys())[0])
            match list(dicts.values())[0]:
                case 1:
                    mark_plus.append(list(dicts.values())[0])
                    mark_minis.append(0)
                case 0.5:
                    mark_minis.append(list(dicts.values())[0])
                    mark_plus.append(0)

            date_list.append(date)
            names_groups.append(group_name)

        creating_csv().create_stat_df(date_list, names_list, names_groups, mark_plus, mark_minis)

        await msg.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=other_kb.start_kb)
    else:
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=other_kb.start_kb)


def register_handlers_output_students(dp: Dispatcher):
    dp.register_callback_query_handler(output_students_group, lambda x: x.data and x.data.startswith('output '))
    dp.register_callback_query_handler(absent_attend_student, lambda x: x.data and x.data.startswith('status '))
    dp.register_callback_query_handler(output_students_group_mark, lambda x: x.data and x.data.startswith('mark_set '))
    dp.register_callback_query_handler(encourage_reprimand_student, lambda x: x.data and x.data.startswith('status_mark '))
    dp.register_message_handler(ready_to_write_exel, text='–ì–æ—Ç–æ–≤–æ')
    dp.register_message_handler(ready_to_write_statistics, text='–ó–∞–∫–æ–Ω—á–∏—Ç—å')
